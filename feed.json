{
    "version": "https://jsonfeed.org/version/1",
    "title": "GSociety",
    "description": "",
    "home_page_url": "https://gsociety.fr",
    "feed_url": "https://gsociety.fr/feed.json",
    "user_comment": "",
    "author": {
        "name": "Guisch"
    },
    "items": [
        {
            "id": "https://gsociety.fr/when-bots-pump-your-otps-sms-pumping/",
            "url": "https://gsociety.fr/when-bots-pump-your-otps-sms-pumping/",
            "title": "When Bots Pump Your OTPs (SMS Pumping)",
            "summary": "A few years ago, I spent several months chasing a weird kind&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1j7nh6e7iqd\">💬 The World Still Runs on SMS</a></li>\n<li><a href=\"#mcetoc_1j7nh6e7iqe\">🚨 The First Signs</a></li>\n<li><a href=\"#mcetoc_1j7nh6e7iqf\">🧱 What Didn’t Work</a></li>\n<li><a href=\"#mcetoc_1j7nh6e7iqg\">🧰 What Actually Worked</a></li>\n<li><a href=\"#mcetoc_1j7nh6e7iqh\">🧠 What I Learned</a></li>\n<li><a href=\"#mcetoc_1j7nh6e7iqi\">🔒 Why SMS Needs to Go</a></li>\n<li><a href=\"#mcetoc_1j7nh6e7iqj\">🏁 Closing thoughts</a></li>\n</ul>\n</div>\n<p data-start=\"417\" data-end=\"572\">A few years ago, I spent several months chasing a weird kind of fraud — the kind that doesn’t steal data, doesn’t hack users, but still burns real money.</p>\n<p data-start=\"574\" data-end=\"604\">It’s called <strong data-start=\"586\" data-end=\"601\">SMS Pumping</strong>.</p>\n<p data-start=\"606\" data-end=\"864\">At first, it looked like just “spam traffic.” Then it became a full-time cat-and-mouse game between our defenses and whoever was behind it.<br data-start=\"745\" data-end=\"748\">Here’s the story, what we tried, what failed, and what I’d recommend if you’re running authentication systems today.</p>\n<hr data-start=\"866\" data-end=\"869\">\n<h2 id=\"mcetoc_1j7nh6e7iqd\" data-start=\"871\" data-end=\"906\">💬 The World Still Runs on SMS</h2>\n<p data-start=\"908\" data-end=\"965\">Even in 2025, SMS is still everywhere.<br data-start=\"946\" data-end=\"949\">It’s used for:</p>\n<ul data-start=\"966\" data-end=\"1051\">\n<li data-start=\"966\" data-end=\"994\">\n<p data-start=\"968\" data-end=\"994\">verifying phone numbers,</p>\n</li>\n<li data-start=\"966\" data-end=\"994\">\n<p data-start=\"968\" data-end=\"994\">logging in,</p>\n</li>\n<li data-start=\"1011\" data-end=\"1051\">\n<p data-start=\"1013\" data-end=\"1051\">and two-factor authentication (2FA).</p>\n</li>\n</ul>\n<p data-start=\"1053\" data-end=\"1216\">It’s not perfect, but it’s easy: no app to install, no setup friction, works on every device.<br data-start=\"1146\" data-end=\"1149\">That simplicity is exactly what makes it popular — and exploitable.</p>\n<p data-start=\"1218\" data-end=\"1281\">If you haven’t met <strong data-start=\"1237\" data-end=\"1252\">SMS Pumping</strong>, here’s the quick version:</p>\n<p data-start=\"1283\" data-end=\"1539\">Fraudsters abuse your “send me an OTP” endpoint to trigger thousands of messages to phone numbers they control. Those numbers are <strong data-start=\"1413\" data-end=\"1453\">premium-rate or international routes</strong> that generate a profit when messages are sent.<br data-start=\"1500\" data-end=\"1503\">You pay the bill; they take the cut.</p>\n<p data-start=\"1541\" data-end=\"1882\">As <a href=\"https://www.twilio.com/docs/verify/preventing-toll-fraud?utm_source=chatgpt.com\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">Twilio explains</a>, it’s a form of <strong data-start=\"1636\" data-end=\"1675\">Artificially Inflated Traffic (AIT)</strong> or <strong data-start=\"1679\" data-end=\"1693\">Toll Fraud</strong> — a telecom problem repackaged for web apps.<br data-start=\"1738\" data-end=\"1741\">Or, as <a href=\"https://datadome.co/fr/learning-center/quest-ce-que-le-sms-pumping-et-quel-est-son-impact-sur-votre-entreprise/\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">Datadome</a> puts it:</p>\n<blockquote data-start=\"1883\" data-end=\"2046\">\n<p data-start=\"1885\" data-end=\"2046\">Bots exploit OTP systems by injecting premium or international numbers into signup forms, creating massive artificial SMS volumes — and revenue for someone else.</p>\n</blockquote>\n<p data-start=\"2048\" data-end=\"2131\">No data breach, no ransomware, just your infrastructure quietly working <em data-start=\"2120\" data-end=\"2130\">for them</em>.</p>\n<hr data-start=\"2133\" data-end=\"2136\">\n<h2 id=\"mcetoc_1j7nh6e7iqe\" data-start=\"2138\" data-end=\"2161\">🚨 The First Signs</h2>\n<p data-start=\"2163\" data-end=\"2419\">It started subtly. SMS verifications were fine one day, then slightly up the next.<br data-start=\"2245\" data-end=\"2248\">Soon, the metrics showed an order-of-magnitude increase in OTP requests.<br data-start=\"2320\" data-end=\"2323\">Nothing else had changed — no marketing campaign, no new feature rollout, no real user growth.</p>\n<p data-start=\"2421\" data-end=\"2463\">The pattern was clear only when zoomed in:</p>\n<ul data-start=\"2464\" data-end=\"2633\">\n<li data-start=\"2464\" data-end=\"2528\">\n<p data-start=\"2466\" data-end=\"2528\">Many numbers followed each other sequentially (like blocks).</p>\n</li>\n<li data-start=\"2529\" data-end=\"2575\">\n<p data-start=\"2531\" data-end=\"2575\">Most of them never completed verification.</p>\n</li>\n<li data-start=\"2576\" data-end=\"2633\">\n<p data-start=\"2578\" data-end=\"2633\">Traffic looked “normal enough” to pass basic filters.</p>\n</li>\n</ul>\n<p data-start=\"2635\" data-end=\"2837\">It wasn’t always a single big spike. It was distributed, blended into normal usage.<br data-start=\"2711\" data-end=\"2714\">That’s what makes SMS Pumping tricky — the goal is to make it <strong data-start=\"2776\" data-end=\"2802\">look like real traffic</strong>, so you don’t block it right away.</p>\n<hr data-start=\"2839\" data-end=\"2842\">\n<h2 id=\"mcetoc_1j7nh6e7iqf\" data-start=\"2844\" data-end=\"2868\">🧱 What Didn’t Work</h2>\n<p data-start=\"2870\" data-end=\"2973\">We tried every textbook mitigation. Some slowed the fraud down for a while, but none fixed it for good.</p>\n<p data-start=\"2975\" data-end=\"3082\"><strong data-start=\"2975\" data-end=\"3000\">1. IP or ASN blocking</strong><br data-start=\"3000\" data-end=\"3003\">Attackers use proxies and mobile networks. The IPs rotate constantly — useless.</p>\n<p data-start=\"3084\" data-end=\"3172\"><strong data-start=\"3084\" data-end=\"3113\">2. Per-number rate limits</strong><br data-start=\"3113\" data-end=\"3116\">They just change numbers. Automation makes that trivial.</p>\n<p data-start=\"3174\" data-end=\"3354\"><strong data-start=\"3174\" data-end=\"3193\">3. GeoIP-blocking</strong><br data-start=\"3193\" data-end=\"3196\">Cutting off “risky” regions helped for a while, but traffic always found a detour.<br data-start=\"3278\" data-end=\"3281\">Also, legitimate users in new regions occasionally got blocked — not fun.</p>\n<p data-start=\"3356\" data-end=\"3581\"><strong data-start=\"3356\" data-end=\"3385\">4. Premium number filters</strong><br data-start=\"3385\" data-end=\"3388\">We used Google’s <a href=\"https://github.com/google/libphonenumber\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">libphonenumber</a> to reject known premium ranges.<br data-start=\"3495\" data-end=\"3498\">Worked in regulated markets, failed elsewhere. Metadata was incomplete or outdated.</p>\n<hr data-start=\"3950\" data-end=\"3953\">\n<h2 id=\"mcetoc_1j7nh6e7iqg\" data-start=\"3955\" data-end=\"3983\">🧰 What Actually Worked</h2>\n<p data-start=\"3985\" data-end=\"4116\">After months of testing, we realized there’s no magic button.<br data-start=\"4046\" data-end=\"4049\">The only winning move was <strong data-start=\"4075\" data-end=\"4115\">layering multiple imperfect defenses</strong>.</p>\n<p data-start=\"3985\" data-end=\"4116\"><strong data-start=\"3583\" data-end=\"3614\">✅ Captcha / bot challenges</strong><br data-start=\"3614\" data-end=\"3617\">We deployed <a href=\"https://cloud.google.com/recaptcha/docs/sms-fraud-detection\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">reCAPTCHA Enterprise with SMS Fraud protection</a>. We were among the first users to beta test the feature. It's not a perfect solution: false positives were mostly controlled, but still present sometimes. But it really helped stop fraud as we were shifting from the \"easy-target\" to the \"target that requires effort\". What ultimately drove the decision was mainly the cheap cost, and the fact that competitor (market leader) was also using it. <br>However, according to <a href=\"https://2captcha.com/p/recaptcha_enterprise\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">2captcha.com</a>, solving costs around $2 per thousand CAPTCHAs — and it's not enough to kill fraudsters business model.</p>\n<p data-start=\"4118\" data-end=\"4446\"><strong data-start=\"4118\" data-end=\"4150\">✅ Prefix-based rate limiting</strong><br data-start=\"4150\" data-end=\"4153\">Instead of blocking individual numbers, we rate-limited based on the <strong data-start=\"4222\" data-end=\"4232\">prefix</strong> (first N digits).<br data-start=\"4250\" data-end=\"4253\">Fraudsters often used contiguous blocks, so this trapped whole batches.<br data-start=\"4324\" data-end=\"4327\">You just have to tune <em data-start=\"4349\" data-end=\"4352\">N</em> carefully — too broad and you block marketing campaigns, too narrow and you miss the pattern.</p>\n<p data-start=\"4448\" data-end=\"4674\"><strong data-start=\"4448\" data-end=\"4490\">✅ Geo-permissions on your SMS provider</strong><br data-start=\"4490\" data-end=\"4493\">Use your provider’s “geo-permissions” (Twilio, MessageBird, etc.) to disable delivery in markets where you don’t operate.<br data-start=\"4614\" data-end=\"4617\">Every unnecessary region is free profit for someone else.</p>\n<p data-start=\"4676\" data-end=\"4755\"><strong data-start=\"4676\" data-end=\"4721\">✅ Real-time monitoring and anomaly alerts</strong><br data-start=\"4721\" data-end=\"4724\">We built dashboards tracking:</p>\n<ul data-start=\"4756\" data-end=\"4885\">\n<li data-start=\"4756\" data-end=\"4793\">\n<p data-start=\"4758\" data-end=\"4793\">OTPs requested vs. OTPs completed</p>\n</li>\n<li data-start=\"4794\" data-end=\"4819\">\n<p data-start=\"4796\" data-end=\"4819\">cost per SMS provider</p>\n</li>\n<li data-start=\"4820\" data-end=\"4856\">\n<p data-start=\"4822\" data-end=\"4856\">fraud risk scores from reCAPTCHA</p>\n</li>\n<li data-start=\"4857\" data-end=\"4885\">\n<p data-start=\"4859\" data-end=\"4885\">SMS per region over time</p>\n</li>\n</ul>\n<p data-start=\"4887\" data-end=\"4943\">It’s manual work — but without a baseline, you’re blind.</p>\n<p data-start=\"4945\" data-end=\"5147\"><strong data-start=\"4945\" data-end=\"4973\">✅ Alternative auth flows</strong><br data-start=\"4973\" data-end=\"4976\">Slowly push users toward <strong data-start=\"5006\" data-end=\"5025\">non-SMS methods</strong> when possible: email links, push notifications, WebAuthN, you name it.<br data-start=\"5086\" data-end=\"5089\">Reducing exposure is the best mitigation you’ll ever have.</p>\n<hr data-start=\"5149\" data-end=\"5152\">\n<h2 id=\"mcetoc_1j7nh6e7iqh\" data-start=\"5154\" data-end=\"5176\">🧠 What I Learned</h2>\n<p data-start=\"5178\" data-end=\"5208\">A few lessons stuck with me:</p>\n<ul data-start=\"5210\" data-end=\"5682\">\n<li data-start=\"5210\" data-end=\"5328\">\n<p data-start=\"5212\" data-end=\"5328\"><strong data-start=\"5212\" data-end=\"5265\">Fraudsters think in profit margins, not payloads.</strong><br data-start=\"5265\" data-end=\"5268\">If your SMS endpoint lets them earn, they’ll never stop.</p>\n</li>\n<li data-start=\"5330\" data-end=\"5470\">\n<p data-start=\"5332\" data-end=\"5470\"><strong data-start=\"5332\" data-end=\"5385\">Security teams need visibility, not just filters.</strong><br data-start=\"5385\" data-end=\"5388\">The hardest part wasn’t blocking — it was <em data-start=\"5432\" data-end=\"5441\">knowing</em> when we were under attack.</p>\n</li>\n<li data-start=\"5472\" data-end=\"5582\">\n<p data-start=\"5474\" data-end=\"5582\"><strong data-start=\"5474\" data-end=\"5499\">Every control decays.</strong><br data-start=\"5499\" data-end=\"5502\">Geo rules, blocklists, regexes — they rot the moment you stop updating them.</p>\n</li>\n<li data-start=\"5584\" data-end=\"5682\">\n<p data-start=\"5586\" data-end=\"5682\"><strong data-start=\"5586\" data-end=\"5617\">No tool beats common sense.</strong><br data-start=\"5617\" data-end=\"5620\">Automation helps, but understanding your traffic helps more.</p>\n</li>\n</ul>\n<hr data-start=\"5684\" data-end=\"5687\">\n<h2 id=\"mcetoc_1j7nh6e7iqi\" data-start=\"5689\" data-end=\"5716\">🔒 Why SMS Needs to Go</h2>\n<p data-start=\"5718\" data-end=\"5855\">I get it — SMS is easy. But it’s also fragile.<br data-start=\"5764\" data-end=\"5767\">Between SIM swaps, interception, and pumping fraud, it’s more of a tax than a feature.</p>\n<p data-start=\"5857\" data-end=\"6010\">Modern authentication standards like <strong data-start=\"5894\" data-end=\"5906\">WebAuthN</strong> and <strong data-start=\"5911\" data-end=\"5923\">passkeys</strong> exist for a reason.<br data-start=\"5943\" data-end=\"5946\">They’re phishing-resistant, cheap, and don’t depend on telcos.</p>\n<p data-start=\"6012\" data-end=\"6158\">So, if your product still uses SMS 2FA and you have the choice — <strong data-start=\"6077\" data-end=\"6111\">favor no-SMS whenever possible</strong>.<br data-start=\"6112\" data-end=\"6115\">SMS should be a fallback, not your default.</p>\n<hr data-start=\"6160\" data-end=\"6163\">\n<h2 id=\"mcetoc_1j7nh6e7iqj\" data-start=\"6165\" data-end=\"6203\">🏁 Closing thoughts</h2>\n<p data-start=\"6248\" data-end=\"6412\">SMS authentication isn’t going anywhere, but it’s time to stop pretending it’s secure. If you're still using it, at least make sure you’re not paying fraudsters for the privilege. When SMS is your only viable option, treat it as a security liability — not a solution.<br data-start=\"414\" data-end=\"417\">Layer your defenses, monitor relentlessly, and plan your exit strategy. If you can move away from SMS, do it. You'll save money — and sleep.</p>\n<p> </p>",
            "image": "https://gsociety.fr/media/posts/7/ChatGPT-Image-16-oct.-2025-22_53_44.png",
            "author": {
                "name": "Guisch"
            },
            "tags": [
                   "webauthn",
                   "tollfraud",
                   "telecom security",
                   "sms pumping",
                   "fraud"
            ],
            "date_published": "2025-10-16T22:53:58+02:00",
            "date_modified": "2025-10-17T00:22:16+02:00"
        },
        {
            "id": "https://gsociety.fr/the-day-i-logged-in-with-a-hash/",
            "url": "https://gsociety.fr/the-day-i-logged-in-with-a-hash/",
            "title": "The Day I Logged in With a Hash",
            "summary": "I’ve said it before: a single password per account isn’t enough anymore.",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1j3bo2jp99p\">🚀 Enter SimpleLogin (and a Throwback)</a></li>\n<li><a href=\"#mcetoc_1j3bo2jp99q\">🔑 The Problem: Losing 2FA</a></li>\n<li><a href=\"#mcetoc_1j3bo2jp99r\">🕵️ The Discovery</a></li>\n<li><a href=\"#mcetoc_1j3bo2jp99s\">📜 The Code Behind the Bug</a></li>\n<li><a href=\"#mcetoc_1j3bo2jp99t\">📨 Disclosure (and Frustration)</a></li>\n<li><a href=\"#mcetoc_1j3bo2jp99u\">🛠️ The Fix</a></li>\n<li><a href=\"#mcetoc_1j3bo2jp99v\">💡 Lessons Learned</a></li>\n<li><a href=\"#mcetoc_1j3bo2jp9a0\">🔒 Why This Matters</a></li>\n</ul>\n</div>\n<p data-start=\"387\" data-end=\"465\">I’ve said it before: <strong data-start=\"408\" data-end=\"463\">a single password per account isn’t enough anymore.</strong></p>\n<p data-start=\"467\" data-end=\"747\">If you care even a little about your online footprint, you should be thinking about <strong data-start=\"551\" data-end=\"576\">one email per account</strong> too. Why? Because your email address <em data-start=\"614\" data-end=\"618\">is</em> your identity online. And just like password reuse, reusing the same email everywhere makes you predictable and easy to track.</p>\n<p data-start=\"749\" data-end=\"1004\">For years, I tried to solve this with Gmail “+” aliases. You know the trick: <code data-start=\"826\" data-end=\"854\">ghislain+twitter@gmail.com</code>. It works… until it doesn’t. Bad actors now routinely strip the “+” part when they test leaked creds (<a href=\"https://krebsonsecurity.com/2022/08/the-security-pros-and-cons-of-using-email-aliases/comment-page-3/\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">source</a>). Suddenly, my neat aliasing trick was useless.</p>\n<p data-start=\"1006\" data-end=\"1046\">So I went hunting for a better option.</p>\n<hr data-start=\"1048\" data-end=\"1051\">\n<h2 id=\"mcetoc_1j3bo2jp99p\" data-start=\"1053\" data-end=\"1096\">🚀 Enter SimpleLogin (and a Throwback)</h2>\n<p data-start=\"1098\" data-end=\"1251\">I’ve been looking for a platform like <a href=\"https://github.com/simple-login\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">SimpleLogin</a> for years. In fact, as a student I even <em data-start=\"1188\" data-end=\"1202\">built my own</em>: <a href=\"https://github.com/guisch/Keemail\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"noopener noreferrer\">Keemail</a>.</p>\n<p data-start=\"1253\" data-end=\"1275\">Spoiler: it was bad.</p>\n<ul data-start=\"1276\" data-end=\"1372\">\n<li data-start=\"1276\" data-end=\"1290\">\n<p data-start=\"1278\" data-end=\"1290\">No polish.</p>\n</li>\n<li data-start=\"1291\" data-end=\"1317\">\n<p data-start=\"1293\" data-end=\"1317\">Missing core features.</p>\n</li>\n<li data-start=\"1318\" data-end=\"1372\">\n<p data-start=\"1320\" data-end=\"1372\">Wouldn’t survive today’s email security standards.</p>\n</li>\n</ul>\n<p data-start=\"1374\" data-end=\"1447\">But the idea was there — unique emails per service, created via API, privacy by default.</p>\n<p data-start=\"1449\" data-end=\"1752\">When I discovered SimpleLogin, I was instantly sold. It did everything I wanted, way better. I’ve been self-hosting it for years now. <a href=\"https://simplelogin.io/blog/simplelogin-join-proton/\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">Proton eventually acquired them</a> and integrated it into their suite, but the original team deserves huge kudos. It’s one of those rare projects that just <em data-start=\"1736\" data-end=\"1749\">makes sense</em>.</p>\n<p data-start=\"1754\" data-end=\"1956\">For the uninitiated: <strong data-start=\"1775\" data-end=\"1842\">SimpleLogin lets you create unlimited email aliases on the fly.</strong> You hand those out instead of your real email. If one gets spammed, you just kill it. Clean, simple, brilliant.</p>\n<hr data-start=\"1958\" data-end=\"1961\">\n<h2 id=\"mcetoc_1j3bo2jp99q\" data-start=\"1963\" data-end=\"1994\">🔑 The Problem: Losing 2FA</h2>\n<p data-start=\"1996\" data-end=\"2157\">Fast forward to last year. I changed phones and lost access to the 2FA on my main SimpleLogin account. No big deal — that’s what recovery codes are for, right?</p>\n<p data-start=\"2159\" data-end=\"2235\">Except… I hadn’t saved mine. (Yes, yes, I know. Do as I say, not as I do.)</p>\n<p data-start=\"2237\" data-end=\"2326\">So now I was stuck. Out of curiosity — and, let’s be honest, a bit of fun — I wondered:</p>\n<p data-start=\"2328\" data-end=\"2419\"><em data-start=\"2328\" data-end=\"2417\">Could I regenerate the codes? Or at least poke around in the DB to see what was stored?</em></p>\n<hr data-start=\"2421\" data-end=\"2424\">\n<h2 id=\"mcetoc_1j3bo2jp99r\" data-start=\"2426\" data-end=\"2448\">🕵️ The Discovery</h2>\n<p data-start=\"2450\" data-end=\"2558\">I checked the database. Good news: the recovery codes weren’t in plain text. They were hashed. Nice touch.</p>\n<p data-start=\"2560\" data-end=\"2632\">Bad news (or so I thought): that meant I couldn’t just copy-paste one.</p>\n<p data-start=\"2634\" data-end=\"2754\">But then I tried something dumb. I copied the full hashed recovery code from the DB and pasted it into the login form.</p>\n<p data-start=\"2756\" data-end=\"2768\">It worked.</p>\n<p data-start=\"2770\" data-end=\"2824\">I thought it was a fluke. Tried again. Still worked.</p>\n<p data-start=\"2826\" data-end=\"2870\">At this point my brain went: <em data-start=\"2855\" data-end=\"2868\">wait, what?</em></p>\n<hr data-start=\"2872\" data-end=\"2875\">\n<h2 id=\"mcetoc_1j3bo2jp99s\" data-start=\"2877\" data-end=\"2908\">📜 The Code Behind the Bug</h2>\n<p data-start=\"2910\" data-end=\"2981\">A quick look at the <a href=\"https://github.com/simple-login/app/blob/faeddc365c602f8aa672b0f05f09af1605da46d1/app/models.py#L2723-L2729\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">source</a> confirmed it. In the recovery code lookup:</p>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">\n<pre class=\"language-python\"><code>def find_by_user_code(cls, user: User, code: str):\n    hashed_code = cls._hash_code(code)\n    # TODO: Only return hashed codes once there aren't unhashed codes in the db.\n    found_code = cls.get_by(user_id=user.id, code=hashed_code)\n    if found_code:\n        return found_code\n    return cls.get_by(user_id=user.id, code=code)\n</code></pre>\n</div>\n</div>\n<p data-start=\"3327\" data-end=\"3341\">Translation:</p>\n<ul data-start=\"3342\" data-end=\"3439\">\n<li data-start=\"3342\" data-end=\"3371\">\n<p data-start=\"3344\" data-end=\"3371\">They hash the user input.</p>\n</li>\n<li data-start=\"3372\" data-end=\"3439\">\n<p data-start=\"3374\" data-end=\"3439\">But if that doesn’t match, they also check the raw code column.</p>\n</li>\n</ul>\n<p data-start=\"3441\" data-end=\"3498\">So the <strong data-start=\"3448\" data-end=\"3496\">hashed recovery code itself was valid input.</strong></p>\n<p data-start=\"3500\" data-end=\"3598\">That’s the equivalent of storing passwords as hashes… but then letting you log in with the hash.</p>\n<hr data-start=\"3600\" data-end=\"3603\">\n<h2 id=\"mcetoc_1j3bo2jp99t\" data-start=\"3605\" data-end=\"3641\">📨 Disclosure (and Frustration)</h2>\n<p data-start=\"3643\" data-end=\"3722\">I followed the responsible disclosure process and emailed SimpleLogin/Proton.</p>\n<p data-start=\"3724\" data-end=\"3745\">Their first answer?</p>\n<blockquote data-start=\"3746\" data-end=\"3857\">\n<p data-start=\"3748\" data-end=\"3857\"><em data-start=\"3748\" data-end=\"3855\">If an attacker has access to the DB, they can impersonate a user anyway. 2FA isn’t end-to-end encryption.</em></p>\n</blockquote>\n<p data-start=\"3859\" data-end=\"3890\">True, but… missing the point.</p>\n<p data-start=\"3892\" data-end=\"4078\">The point of hashing recovery codes is to prevent them from being directly usable if the DB leaks. By letting the hash itself authenticate, you’ve basically made them plain-text again.</p>\n<p data-start=\"4080\" data-end=\"4184\">Imagine if password hashes worked the same way. You’d laugh someone out of the room for suggesting it.</p>\n<p data-start=\"4186\" data-end=\"4241\">I explained this in a follow-up email. Then… silence.</p>\n<hr data-start=\"4243\" data-end=\"4246\">\n<h2 id=\"mcetoc_1j3bo2jp99u\" data-start=\"4248\" data-end=\"4264\">🛠️ The Fix</h2>\n<p data-start=\"4266\" data-end=\"4378\">Three days later, still no response. So I opened a <a href=\"https://github.com/simple-login/app/pull/2132\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">public PR</a>.</p>\n<p data-start=\"4380\" data-end=\"4485\">The fix was straightforward: only ever compare <code>hashed(user_input)</code> to <code>stored_hashed(code)</code>. Nothing else.</p>\n<p data-start=\"4487\" data-end=\"4531\">It was merged within a week. Issue closed.</p>\n<hr data-start=\"4533\" data-end=\"4536\">\n<h2 id=\"mcetoc_1j3bo2jp99v\" data-start=\"4538\" data-end=\"4561\">💡 Lessons Learned</h2>\n<p data-start=\"4563\" data-end=\"4608\">A few takeaways from this little adventure:</p>\n<ul data-start=\"4610\" data-end=\"5271\">\n<li data-start=\"4610\" data-end=\"4764\">\n<p data-start=\"4612\" data-end=\"4764\"><strong data-start=\"4612\" data-end=\"4660\">Even great products can make silly mistakes.</strong> I still love and use SimpleLogin. But this bug shows that no stack is immune to bad design shortcuts.</p>\n</li>\n<li data-start=\"4765\" data-end=\"4891\">\n<p data-start=\"4767\" data-end=\"4891\"><strong data-start=\"4767\" data-end=\"4832\">Hashing is meaningless if you treat the hash like the secret.</strong> This feels obvious, but it’s exactly what happened here.</p>\n</li>\n<li data-start=\"4892\" data-end=\"5072\">\n<p data-start=\"4894\" data-end=\"5072\"><strong data-start=\"4894\" data-end=\"4928\">Disclosure can be frustrating.</strong> I don’t blame the SimpleLogin team — I get it, priorities, context, “bigger picture.” But sometimes you need to insist. Politely, but firmly.</p>\n</li>\n<li data-start=\"5073\" data-end=\"5271\">\n<p data-start=\"5075\" data-end=\"5271\"><strong data-start=\"5075\" data-end=\"5111\">Student me wasn’t totally wrong.</strong> My Keemail project <em>failed</em>, but the core idea was right. Seeing SimpleLogin thrive, and even contributing a patch to fix a bug, was a nice full-circle moment.</p>\n</li>\n</ul>\n<hr data-start=\"5273\" data-end=\"5276\">\n<h2 id=\"mcetoc_1j3bo2jp9a0\" data-start=\"5278\" data-end=\"5302\">🔒 Why This Matters</h2>\n<p data-start=\"5304\" data-end=\"5430\">This isn’t about dunking on a product I like. It’s about showing how small design choices in security have big consequences.</p>\n<p data-start=\"5432\" data-end=\"5626\">2FA is supposed to protect against stolen passwords. Recovery codes are supposed to protect against losing 2FA. But if your recovery codes can themselves be bypassed, the whole system weakens.</p>\n<p data-start=\"5628\" data-end=\"5691\">And that’s a lesson worth remembering far beyond SimpleLogin.</p>",
            "image": "https://gsociety.fr/media/posts/6/ChatGPT-Image-24-aout-2025-01_46_01.png",
            "author": {
                "name": "Guisch"
            },
            "tags": [
                   "simplelogin",
                   "email security",
                   "disclosure",
                   "authentication",
                   "2FA"
            ],
            "date_published": "2025-08-23T17:06:27+02:00",
            "date_modified": "2025-08-24T01:46:17+02:00"
        },
        {
            "id": "https://gsociety.fr/startup-security-in-2025-what-actually-matters/",
            "url": "https://gsociety.fr/startup-security-in-2025-what-actually-matters/",
            "title": "Startup Security in 2025: What Actually Matters",
            "summary": "👋 I’m part of SecAtScale, an association of security leaders from startups&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1iu7ranj91h\">The 2025 Security Priorities: What the Data Says</a></li>\n<li><a href=\"#mcetoc_1iu7ranj91i\">First: Stop Building Your Program for a SOC 2 That Isn’t Even Signed</a></li>\n<li><a href=\"#mcetoc_1iu7ranj91j\">Want to Be Efficient? Avoid the Tool Soup</a></li>\n<li><a href=\"#mcetoc_1iu7ranj91k\">DevSecOps, but Only on Tuesdays?</a></li>\n<li><a href=\"#mcetoc_1iu7ranj91l\">Unsexy ≠ Unimportant</a></li>\n<li><a href=\"#mcetoc_1iu7ranj91m\">My 2025 Advice for Startup Security Teams</a></li>\n<li><a href=\"#mcetoc_1iu7ranj91n\">Closing Thoughts</a></li>\n</ul>\n</div>\n<p data-start=\"382\" data-end=\"717\">👋 I’m part of <a href=\"https://www.secatscale.org/\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"noopener noreferrer\">SecAtScale</a>, an association of security leaders from startups and scaleups across the French tech ecosystem. I’ve been lucky enough to contribute to the annual benchmark of SecAtScale (only as a reviewer): the <strong data-start=\"601\" data-end=\"615\">Pulse 2025</strong>, a no-BS survey of 82 security leaders mostly from FrenchTech companies — from seed-stage to well-funded unicorns.</p>\n<p data-start=\"382\" data-end=\"717\"><div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"100%\" height=\"100%\" src=\"https://www.linkedin.com/embed/feed/update/urn:li:ugcPost:7346086037133094912?collapsed=1\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\" title=\"Embedded post\"></iframe></div>\n<p data-start=\"719\" data-end=\"1047\">The goal? Describe the security landscape and help each other figure out what to focus on, and what to stop pretending matters. SecAtScale asks the questions no vendor whitepaper wants you to read. I reviewed the results and decided to share my take on them — as someone who’s been the only security person at a startup, built programs from scratch, and still has <a href=\"https://gsociety.fr/the-great-subdomain-heist/\" title=\"Link to my previous article\" target=\"_blank\" rel=\"noopener noreferrer\">DNS PTSD</a>.</p>\n<p data-start=\"1049\" data-end=\"1063\">Let’s dive in.</p>\n<hr data-start=\"1065\" data-end=\"1068\">\n<h2 id=\"mcetoc_1iu7ranj91h\" data-start=\"1070\" data-end=\"1124\">The 2025 Security Priorities: What the Data Says</h2>\n<p data-start=\"1126\" data-end=\"1247\">Here’s what Pulse 2025 respondents said were their <strong data-start=\"1177\" data-end=\"1209\">top priorities for 2025–2026</strong>:</p>\n<div class=\"_tableContainer_16hzy_1\">\n<div class=\"_tableWrapper_16hzy_14 group flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"1249\" data-end=\"1779\">\n<thead data-start=\"1249\" data-end=\"1313\">\n<tr data-start=\"1249\" data-end=\"1313\">\n<th data-start=\"1249\" data-end=\"1254\" data-col-size=\"sm\">🥇</th>\n<th data-start=\"1254\" data-end=\"1313\" data-col-size=\"md\"><strong data-start=\"1256\" data-end=\"1280\">Detection &amp; Response</strong> (44%) – SIEM, SOAR, EDR, logs…</th>\n</tr>\n</thead>\n<tbody data-start=\"1382\" data-end=\"1779\">\n<tr data-start=\"1382\" data-end=\"1447\">\n<td data-start=\"1382\" data-end=\"1387\" data-col-size=\"sm\">🥈</td>\n<td data-start=\"1387\" data-end=\"1447\" data-col-size=\"md\"><strong data-start=\"1389\" data-end=\"1420\">Compliance &amp; Certifications</strong> (33%) – SOC 2, ISO, etc.</td>\n</tr>\n<tr data-start=\"1448\" data-end=\"1517\">\n<td data-start=\"1448\" data-end=\"1453\" data-col-size=\"sm\">🥉</td>\n<td data-start=\"1453\" data-end=\"1517\" data-col-size=\"md\"><strong data-start=\"1455\" data-end=\"1476\">AppSec / InfraSec</strong> (43%) – SAST/DAST, CNAPP, secrets mgmt</td>\n</tr>\n<tr data-start=\"1518\" data-end=\"1577\">\n<td data-start=\"1518\" data-end=\"1523\" data-col-size=\"sm\">👀</td>\n<td data-start=\"1523\" data-end=\"1577\" data-col-size=\"md\"><strong data-start=\"1525\" data-end=\"1542\">Access &amp; Auth</strong> (27%) – SSO, provisioning, ZTNA…</td>\n</tr>\n<tr data-start=\"1578\" data-end=\"1647\">\n<td data-start=\"1578\" data-end=\"1583\" data-col-size=\"sm\">⚠️</td>\n<td data-start=\"1583\" data-end=\"1647\" data-col-size=\"md\"><strong data-start=\"1585\" data-end=\"1606\">Risk &amp; Governance</strong> (10%) – Policies, process, org changes</td>\n</tr>\n<tr data-start=\"1648\" data-end=\"1710\">\n<td data-start=\"1648\" data-end=\"1653\" data-col-size=\"sm\">📢</td>\n<td data-start=\"1653\" data-end=\"1710\" data-col-size=\"md\"><strong data-start=\"1655\" data-end=\"1679\">Training / Awareness</strong> (6%) – Dev enablement, comms</td>\n</tr>\n<tr data-start=\"1711\" data-end=\"1779\">\n<td data-start=\"1711\" data-end=\"1716\" data-col-size=\"sm\">🧠</td>\n<td data-start=\"1716\" data-end=\"1779\" data-col-size=\"md\"><strong data-start=\"1718\" data-end=\"1737\">AI &amp; Automation</strong> (10%) – Fraud detection, policy tooling</td>\n</tr>\n</tbody>\n</table>\n<div class=\"sticky end-(--thread-content-margin) h-0 self-end select-none\">\n<div class=\"absolute end-0 flex items-end\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">On paper, this seems sane. But I’ve got a few things to say about what I see behind the numbers.</span></div>\n</div>\n</div>\n</div>\n<hr data-start=\"1879\" data-end=\"1882\">\n<h2 id=\"mcetoc_1iu7ranj91i\" data-start=\"1884\" data-end=\"1957\">First: Stop Building Your Program for a SOC 2 That Isn’t Even Signed</h2>\n<p data-start=\"1959\" data-end=\"2113\">Way too many startups (and by startup, I mean real small but growing company) still treat compliance like a product spec. I get it — the sales team wants the SOC 2 badge to close deals. But let me ask you this:</p>\n<blockquote data-start=\"2115\" data-end=\"2234\">\n<p data-start=\"2117\" data-end=\"2172\">Do you even have basic monitoring for your admin panel?<br>Can you revoke a contractor’s access in under 10 minutes?</p>\n</blockquote>\n<p data-start=\"2236\" data-end=\"2361\">If the answer is “no” but you're doing a 12-month ISO 27001 prep, you're burning your team out on checkboxes instead of risk.</p>\n<p data-start=\"2363\" data-end=\"2397\">Start with controls that matter:</p>\n<ul data-start=\"2398\" data-end=\"2592\">\n<li data-start=\"2398\" data-end=\"2429\">\n<p data-start=\"2400\" data-end=\"2429\">Central identity (with SSO)</p>\n</li>\n<li data-start=\"2398\" data-end=\"2429\">\n<p data-start=\"2400\" data-end=\"2429\">MFA everywhere</p>\n</li>\n<li data-start=\"2449\" data-end=\"2497\">\n<p data-start=\"2451\" data-end=\"2497\">Access reviews (that someone actually reads)</p>\n</li>\n<li data-start=\"2498\" data-end=\"2555\">\n<p data-start=\"2500\" data-end=\"2555\">Infra logging that flows into something grep-friendly</p>\n</li>\n<li data-start=\"2556\" data-end=\"2592\">\n<p data-start=\"2558\" data-end=\"2592\">Simple secrets scanning in your CI</p>\n</li>\n</ul>\n<p data-start=\"2594\" data-end=\"2701\">Most of these won’t show up on a SOC 2 dashboard — but they’re what actually prevent production faceplants.</p>\n<hr data-start=\"2703\" data-end=\"2706\">\n<h2 id=\"mcetoc_1iu7ranj91j\" data-start=\"2708\" data-end=\"2755\">Want to Be Efficient? Avoid the Tool Soup</h2>\n<p data-start=\"2757\" data-end=\"2898\">The Pulse shows a clear fatigue around security tooling. It’s not about <em data-start=\"2829\" data-end=\"2838\">whether</em> you have tools — it’s whether they’re helping or hurting.</p>\n<p data-start=\"2900\" data-end=\"3061\">💸 1 out of 4 teams are spending more than <strong data-start=\"2943\" data-end=\"2989\">10% of their IT budget on security tooling</strong>, but many still can’t detect incidents properly or respond fast enough.</p>\n<p data-start=\"3063\" data-end=\"3150\">You don’t need CNAPP, DLP, and SOAR before you can do basic alerting on prod API abuse.</p>\n<p data-start=\"3152\" data-end=\"3206\">Here’s the stack I’d start with for a team &lt;50 people:</p>\n<ul data-start=\"3207\" data-end=\"3441\">\n<li data-start=\"3207\" data-end=\"3246\">\n<p data-start=\"3209\" data-end=\"3246\">GitHub + Dependabot + <a href=\"https://github.com/marketplace/actions/trufflehog-oss\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">secret scanning</a></p>\n</li>\n<li data-start=\"3247\" data-end=\"3296\">\n<p data-start=\"3249\" data-end=\"3296\">CloudTrail + custom detections for your AWS/org</p>\n</li>\n<li data-start=\"3297\" data-end=\"3349\">\n<p data-start=\"3299\" data-end=\"3349\">A basic SIEM (Elastic or even Datadog with alerts)</p>\n</li>\n<li data-start=\"3350\" data-end=\"3386\">\n<p data-start=\"3352\" data-end=\"3386\"><a href=\"https://github.com/TwiN/gatus\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">Uptime monitoring</a> for key surfaces</p>\n</li>\n<li data-start=\"3387\" data-end=\"3441\">\n<p data-start=\"3389\" data-end=\"3441\">One <a href=\"https://securitytxt.org/\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">security contact form</a> (and someone who reads it)</p>\n</li>\n</ul>\n<p data-start=\"3443\" data-end=\"3503\">Everything else is optional until your attack surface grows.</p>\n<hr data-start=\"3505\" data-end=\"3508\">\n<h2 id=\"mcetoc_1iu7ranj91k\" data-start=\"3510\" data-end=\"3548\">DevSecOps, but Only on Tuesdays?</h2>\n<p data-start=\"3550\" data-end=\"3690\">Despite all the talk, <strong data-start=\"3572\" data-end=\"3585\">only ~50%</strong> of teams run SAST/DAST on every PR. Half of us are just praying nothing evil slips into the main branch.</p>\n<p data-start=\"3692\" data-end=\"3790\">Even worse: nearly half of startups <strong data-start=\"3728\" data-end=\"3752\">don’t do DAST at all</strong>.</p>\n<p data-start=\"3792\" data-end=\"3808\">Let me be blunt:</p>\n<blockquote data-start=\"3809\" data-end=\"3934\">\n<p data-start=\"3811\" data-end=\"3934\">If you push code without any kind of dynamic test or auth check validation, you’re not doing AppSec. You’re just... hoping.</p>\n</blockquote>\n<p data-start=\"3936\" data-end=\"4069\">I’d rather see <strong data-start=\"3951\" data-end=\"3974\">slow but consistent</strong> security checks than some 500k€/year commercial scanner that’s run once a quarter and ignored.</p>\n<hr data-start=\"4071\" data-end=\"4074\">\n<h2 id=\"mcetoc_1iu7ranj91l\" data-start=\"4076\" data-end=\"4102\">Unsexy ≠ Unimportant</h2>\n<p data-start=\"135\" data-end=\"193\">Here’s where I disagree (a little) with the Pulse results.</p>\n<p data-start=\"195\" data-end=\"287\">Only <strong data-start=\"200\" data-end=\"206\">6%</strong> of respondents made developer training and awareness a priority. That’s... wild.</p>\n<p data-start=\"289\" data-end=\"383\">Listen, I’m not saying your team should do a 4-hour GDPR compliance quiz. But a dev who knows:</p>\n<ul data-start=\"385\" data-end=\"493\">\n<li data-start=\"385\" data-end=\"402\">\n<p data-start=\"387\" data-end=\"402\">What a JWT is</p>\n</li>\n<li data-start=\"403\" data-end=\"444\">\n<p data-start=\"405\" data-end=\"444\">How to test for broken access control</p>\n</li>\n<li data-start=\"445\" data-end=\"493\">\n<p data-start=\"447\" data-end=\"493\">Where to find the company’s security contact</p>\n</li>\n</ul>\n<p data-start=\"495\" data-end=\"555\">...is 10x more useful to your security than any new scanner.</p>\n<p data-start=\"557\" data-end=\"865\">That said — I can’t really blame the CISOs. I’ve been there. At my previous company, we <em data-start=\"634\" data-end=\"641\">tried</em>. Multiple times. Small-group workshops, fun online platform, you name it. But it’s hard to find the right format — something useful, not too heavy, that doesn't create too much de-focus, that devs like, and not insanely expensive. We never really found the perfect resource that stuck.</p>\n<p data-start=\"867\" data-end=\"1016\">If you’re too busy to train your devs? Cool. Just know you’ll spend triple that time later reviewing sloppy PRs and debugging broken AWS permissions.</p>\n<hr data-start=\"4642\" data-end=\"4645\">\n<h2 id=\"mcetoc_1iu7ranj91m\" data-start=\"4647\" data-end=\"4694\">My 2025 Advice for Startup Security Teams</h2>\n<ol data-start=\"4696\" data-end=\"5457\">\n<li data-start=\"4696\" data-end=\"4809\">\n<p data-start=\"4699\" data-end=\"4809\"><strong data-start=\"4699\" data-end=\"4729\">Hardening beats headlines.</strong><br data-start=\"4729\" data-end=\"4732\">Don’t chase NIS 2 or SOC 2 before you’ve locked down IAM and infra access.</p>\n</li>\n<li data-start=\"4811\" data-end=\"4960\">\n<p data-start=\"4814\" data-end=\"4960\"><strong data-start=\"4814\" data-end=\"4844\">Automate visibility early.</strong><br data-start=\"4844\" data-end=\"4847\">Get alerts on production misuse before you buy a next-gen AI thing. Simple alerts + on-call = actual response.</p>\n</li>\n<li data-start=\"4962\" data-end=\"5117\">\n<p data-start=\"4965\" data-end=\"5117\"><strong data-start=\"4965\" data-end=\"5010\">Build your own “Minimum Viable Security.”</strong><br data-start=\"5010\" data-end=\"5013\">Every org has different needs. Write down your top 5 risks. Now solve for those. That’s your program.</p>\n</li>\n<li data-start=\"5119\" data-end=\"5270\">\n<p data-start=\"5122\" data-end=\"5270\"><strong data-start=\"5122\" data-end=\"5162\">Don’t ship a tool you can’t operate.</strong><br data-start=\"5162\" data-end=\"5165\">Yes, CSPM looks cool in dashboards. But who’s reading the alerts? If it’s just you... don’t deploy it.</p>\n</li>\n<li data-start=\"5272\" data-end=\"5457\">\n<p data-start=\"5275\" data-end=\"5457\"><strong data-start=\"5275\" data-end=\"5331\">Teach developers just enough to break things better.</strong><br data-start=\"5331\" data-end=\"5334\">Good security is a side-effect of good engineering culture. Bonus: fewer late-night pings for “Why is Auth0 denying me?”</p>\n</li>\n</ol>\n<hr data-start=\"5459\" data-end=\"5462\">\n<h2 id=\"mcetoc_1iu7ranj91n\" data-start=\"5464\" data-end=\"5486\">Closing Thoughts</h2>\n<p data-start=\"5488\" data-end=\"5665\">Being part of SecAtScale has shown me this: <strong>almost nobody feels they’re doing enough</strong>. Even big teams feel behind. So if you're a startup wondering where to begin, take a breath.</p>\n<p data-start=\"5667\" data-end=\"5811\">You don’t need to have it all. You need just enough to make an attacker’s life harder than the next target. And you need people who give a damn.  All without impacting business.</p>",
            "image": "https://gsociety.fr/media/posts/5/ChatGPT-Image-21-juin-2025-00_50_25.png",
            "author": {
                "name": "Guisch"
            },
            "tags": [
                   "startup security",
                   "secatscale",
                   "roadmap",
                   "pulse2025",
                   "infosec",
                   "appsec"
            ],
            "date_published": "2025-07-02T17:00:00+02:00",
            "date_modified": "2025-07-02T18:46:47+02:00"
        },
        {
            "id": "https://gsociety.fr/the-great-subdomain-heist/",
            "url": "https://gsociety.fr/the-great-subdomain-heist/",
            "title": "The Great Subdomain Heist",
            "summary": "I was deep into an intense Helldivers 2 session when Google Search&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#the-initial-discovery\">The Initial Discovery</a></li>\n<li><a href=\"#down-the-rabbit-hole\">Down the Rabbit Hole</a></li>\n<li><a href=\"#taking-it-to-the-next-level\">Taking It to The Next Level</a></li>\n<li><a href=\"#why-this-matters-the-anatomy-of-a-subdomain-takeov\">Why This Matters: The Anatomy of a Subdomain Takeover</a></li>\n<li><a href=\"#the-security-implications-are-severe\">The Security Implications Are Severe</a></li>\n<li><a href=\"#recommendations-a-shared-responsibility\">Recommendations: A Shared Responsibility</a>\n<ul>\n<li><a href=\"#mcetoc_1iu7rbpej21\">For Domain Owners and Security Teams:</a></li>\n<li><a href=\"#mcetoc_1iu7rbpej22\">For GitHub:</a></li>\n<li><a href=\"#mcetoc_1iu7rbpej23\">For Registrars (like OVH):</a></li>\n</ul>\n</li>\n<li><a href=\"#the-big-picture\">The Big Picture</a></li>\n</ul>\n</div>\n<p>I was deep into an intense Helldivers 2 session when Google Search Console notifications interrupted my battle against the alien hordes. Someone had claimed ownership of a subdomain I didn't even know existed: <code>ftp.malvetro.corsica</code>.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://gsociety.fr/media/posts/2/gallery/312644962-67cdc6d7-7135-4dac-a063-fdd445e66c04.png\" data-size=\"593x292\"><img decoding=\"auto\" loading=\"lazy\" src=\"https://gsociety.fr/media/posts/2/gallery/312644962-67cdc6d7-7135-4dac-a063-fdd445e66c04-thumbnail.png\" alt=\"New owner for ftp.malvetro.corsica\" width=\"593\" height=\"292\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://gsociety.fr/media/posts/2/gallery/312645004-0a04fcf6-863c-4cd7-a065-50cba1a1fbc2.png\" data-size=\"584x290\"><img decoding=\"auto\" loading=\"lazy\" src=\"https://gsociety.fr/media/posts/2/gallery/312645004-0a04fcf6-863c-4cd7-a065-50cba1a1fbc2-thumbnail.png\" alt=\"New owner for ftp.malvetro.corsica\" width=\"584\" height=\"290\"></a></figure>\n</div></div>\n<p>Within minutes, I went from fighting digital aliens to investigating a real security incident, one that would eventually reveal a massive vulnerability affecting thousands of domains worldwide. More concerning? GitHub knows about it and isn't fixing it.</p>\n<hr>\n<h2 id=\"the-initial-discovery\" class=\"mb-2 mt-6 text-lg font-[500] first:mt-0 dark:font-[475]\">The Initial Discovery</h2>\n<p class=\"my-0\">Opening the suspicious subdomain revealed a gaudy online gambling site plastered.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"1\">\n<figure class=\"gallery__item\"><a href=\"https://gsociety.fr/media/posts/2/gallery/312642997-ac03ecca-8478-4c0e-b20f-6e83ce019230.png\" data-size=\"1143x1240\"><img decoding=\"auto\" loading=\"lazy\" src=\"https://gsociety.fr/media/posts/2/gallery/312642997-ac03ecca-8478-4c0e-b20f-6e83ce019230-thumbnail.png\" alt=\"A gaudy online gambling site\" width=\"768\" height=\"833\"></a></figure>\n</div></div>\n<p>My first instinct: someone had compromised my domain registrar account. But the truth turned out to be more insidious.</p>\n<pre class=\"language-bash\"><code>$ dig malvetro.corsica +noall +answer -t A\nmalvetro.corsica. 442 IN A 185.199.110.153\nmalvetro.corsica. 442 IN A 185.199.109.153\nmalvetro.corsica. 442 IN A 185.199.108.153\nmalvetro.corsica. 442 IN A 185.199.111.153</code></pre>\n<p>Those IP addresses were familiar—they belong to GitHub Pages. My root domain (<code>malvetro.corsica</code>) was legitimately pointing there for my GitHub Pages site. But I'd never configured the <code>ftp</code> subdomain. Checking my DNS records at OVH revealed something disturbing:</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://gsociety.fr/media/posts/2/gallery/312643820-136a0a52-9ed7-4c6b-b0b6-760bd63f603d.png\" data-size=\"1250x36\"><img decoding=\"auto\" loading=\"lazy\" src=\"https://gsociety.fr/media/posts/2/gallery/312643820-136a0a52-9ed7-4c6b-b0b6-760bd63f603d-thumbnail.png\" alt=\"OVH DNS records\" width=\"768\" height=\"22\"></a></figure>\n</div></div>\n<div class=\"w-full md:max-w-[90vw]\">\n<div class=\"codeWrapper text-textMainDark selection:!text-superDark selection:bg-superDuper/10 bg-offset dark:bg-offsetDark my-md relative flex flex-col rounded font-mono text-sm font-thin\">\n<div class=\"-mt-xl\">\n<div class=\"pr-lg\">\n<pre class=\"language-bash\"><code>$ dig ftp.malvetro.corsica +noall +answer -t CNAME\nftp.malvetro.corsica. 430 IN CNAME malvetro.corsica.</code></pre>\n</div>\n</div>\n</div>\n</div>\n<p class=\"my-0\">This CNAME record had been created automatically by my registrar without my knowledge, pointing to my main domain. Since my main domain used GitHub Pages, anyone could claim this subdomain by creating their own GitHub Pages site with the same subdomain in their repository's CNAME file.</p>\n<p class=\"my-0\"><strong>This wasn't a sophisticated hack—it was a systematic exploitation of common DNS practices, GitHub Pages configuration, and lack of domain verification.</strong></p>\n<hr>\n<h2 id=\"down-the-rabbit-hole\" class=\"mb-2 mt-6 text-lg font-[500] first:mt-0 dark:font-[475]\">Down the Rabbit Hole</h2>\n<p class=\"my-0\">To understand the scope, I needed to see if this was an isolated incident or part of a pattern. Searching GitHub for \"HANTUSLOT\" (the gambling site name) revealed several repositories using the same template across various subdomains.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"1\">\n<figure class=\"gallery__item\"><a href=\"https://gsociety.fr/media/posts/2/gallery/312648962-2b00b7f0-d6c0-423a-ba69-f0dd13c97d1c_cropped.png\" data-size=\"934x1073\"><img decoding=\"auto\" loading=\"lazy\" src=\"https://gsociety.fr/media/posts/2/gallery/312648962-2b00b7f0-d6c0-423a-ba69-f0dd13c97d1c_cropped-thumbnail.png\" alt=\"Github Code Search of 'HANTUSLOT'\" width=\"768\" height=\"882\"></a></figure>\n</div></div>\n<p class=\"my-0\">But GitHub's search was too limited for a comprehensive analysis. I turned to the GitHub CLI to dig deeper:</p>\n<div class=\"w-full md:max-w-[90vw]\">\n<div class=\"codeWrapper text-textMainDark selection:!text-superDark selection:bg-superDuper/10 bg-offset dark:bg-offsetDark my-md relative flex flex-col rounded font-mono text-sm font-thin\">\n<div class=\"-mt-xl\">\n<div class=\"text-text-200 bg-background-300 py-xs px-sm inline-block rounded-br rounded-tl-[3px] font-thin\">\n<pre class=\"language-bash\"><code># Search for repo owners with \"ftp.\" in repo names\n$ (gh search repos ftp --sort updated --limit 1000 | while read -r repo _; \n   do if [ $(echo \"$repo\" | grep -E \"\\/ftp\\.\") ]; \n      then echo $repo | cut -d/ -f1; \n   fi; done) | sort -u &gt; accounts\n\n# Clone all repositories from these users\n$ while read -r user; do \n    gh repo list \"$user\" --limit 1000 | \n    while read -r repo _; do \n      mkdir -p \"$user\"; \n      git clone \"https://github.com/$repo\" \"$repo\"; \n    done; \n  done &lt; accounts</code></pre>\n</div>\n</div>\n</div>\n</div>\n<p class=\"my-0\">To catch repos that might have been deleted (like the one targeting my domain), I improved the script to mirror-clone repositories and analyze their historical CNAME files:</p>\n<pre class=\"language-bash\"><code># Mirror clone all repos to get full history\n$ while read -r user; do \n    gh repo list \"$user\" --limit 1000 | \n    while read -r repo _; do \n      mkdir -p \"$user\"; \n      GIT_TERMINAL_PROMPT=0 git clone --mirror \"https://github.com/$repo\" \"$repo.mirror\"; \n    done; \n  done &lt; accounts\n\n# Extract all domain additions from CNAME files in git history\n$ (TMP=$(pwd); for f in $(find $(pwd) -maxdepth 2 -mindepth 2 -type d); do \n     cd $f; \n     git log -p --follow --all -- CNAME | grep -E \"^\\+[a-zA-Z0-9]\" | sed 's/^+//'; \n   done; \n   cd $TMP;) | sort -u &gt; subdomains\n\n# Analyze frequency of subdomain prefixes\n$ cat subdomains | cut -d. -f1 | sort | uniq -c | sort -n\n[...]\n      5 status\n      6 blog\n      6 depo10bonus10\n      6 depo20bonus20\n      6 linkserverinternasional\n      6 linkservervietnam\n      7 beta\n      7 docs\n      7 linkserverasia\n      7 linkserversensasional\n      8 cpanel\n      8 test\n     13 duit188\n     13 whm\n     26 webmail\n     37 www\n     48 mail\n   2091 ftp</code></pre>\n<p class=\"my-0\">The results were staggering. The frequency analysis revealed <strong>2091 instances of \"ftp\" subdomains</strong> being targeted. Other common targets included \"mail\" (48 instances), \"www\" (37), \"webmail\" (26), and other standard subdomains often created by default by domain registrars. You can find the list of all subdomains <a href=\"https://github.com/Guisch/security-incident-20240313-github-page/blob/main/repositories/subdomains\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"noopener noreferrer\">here</a>. There are likely subdomains in the list that are legitimate, but I don't see cases where one would host a GitHub Pages on an <code>ftp</code> subdomain. This confirms my belief that:</p>\n<ul dir=\"auto\">\n<li>Attackers are using automated tools.</li>\n<li><code>ftp</code> is generated by default on some registrars.</li>\n</ul>\n<p dir=\"auto\">The subdomain takeover is quite well-known. Take, for example, <a href=\"https://github.com/EdOverflow/can-i-take-over-xyz\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">can-i-take-over-xyz</a>, a superb tool for checking how to takeover domains or dangling subdomains with unused CNAME DNS records like mine. This is discussed in this issue: <a href=\"https://github.com/EdOverflow/can-i-take-over-xyz/issues/68#issuecomment-1949450029\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"nofollow noopener noreferrer\">EdOverflow/can-i-take-over-xyz#68 (comment)</a>. To GitHub credits, they actually \"warns\" about it in the <a href=\"https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#about-custom-domain-configuration\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"noopener noreferrer\">documentation</a>:</p>\n<blockquote>\n<p dir=\"auto\">We recommend verifying your custom domain prior to adding it to your repository, in order to improve security and avoid takeover attacks.</p>\n</blockquote>\n<p dir=\"auto\">However, here the source of the issue is not on a legacy subdomain that wasn't properly decommissioned but a subdomain generated by default by the registrar.</p>\n<hr>\n<h2 id=\"taking-it-to-the-next-level\" class=\"mb-2 mt-6 text-lg font-[500] first:mt-0 dark:font-[475]\">Taking It to The Next Level</h2>\n<p class=\"my-0\">The scale of this vulnerability demanded a more comprehensive approach. I developed a custom tool in Python that:</p>\n<ol class=\"marker:text-textOff list-decimal\">\n<li>\n<p class=\"my-0\">Used public reverse DNS data to identify all domains and subdomains pointing to GitHub Pages IPs</p>\n</li>\n<li>\n<p class=\"my-0\">Checked which ones could be claimed through GitHub Pages</p>\n</li>\n<li>\n<p class=\"my-0\">Systematically identified vulnerable domains and subdomains</p>\n</li>\n</ol>\n<p class=\"my-0\">The result? I was able to take over approximately <strong>5,000 domains and subdomains</strong> in less than three weeks before GitHub banned my account.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"1\">\n<figure class=\"gallery__item\"><a href=\"https://gsociety.fr/media/posts/2/gallery/Screenshot-2025-05-23-at-10.38.50.png\" data-size=\"1670x1832\"><img decoding=\"auto\" loading=\"lazy\" src=\"https://gsociety.fr/media/posts/2/gallery/Screenshot-2025-05-23-at-10.38.50-thumbnail.png\" alt=\"Automated domain takeover\" width=\"768\" height=\"843\"></a></figure>\n</div></div>\n<p class=\"my-0\">While the ban was technically justified under their Acceptable Use Policy, I hadn't been using these takeovers for malicious purposes. In fact, I redirected affected users to GitHub's documentation on how to regain control of their domains.</p>\n<p class=\"my-0\"><strong>I had already reported this vulnerability to GitHub via HackerOne in March 2024, but their response was dismissive:</strong></p>\n<blockquote>\n<p class=\"my-0\">We have determined that it is a known issue that does not present a significant security risk. We may make this functionality more strict in the future, but we don't have anythingto announce right now.</p>\n</blockquote>\n<p class=\"my-0\">A year later, in May 2025, <a href=\"https://github.com/EdOverflow/can-i-take-over-xyz/issues/68#issuecomment-2870782169\" target=\"_blank\"  class=\"extlink extlink-icon-1\"  rel=\"noopener noreferrer\">nothing has changed</a>.</p>\n<hr>\n<h2 id=\"why-this-matters-the-anatomy-of-a-subdomain-takeov\" class=\"mb-2 mt-6 text-lg font-[500] first:mt-0 dark:font-[475]\">Why This Matters: The Anatomy of a Subdomain Takeover</h2>\n<p class=\"my-0\">The vulnerability pattern follows a predictable flow:</p>\n<ol class=\"marker:text-textOff list-decimal\">\n<li>\n<p class=\"my-0\"><strong>Domain owner sets up GitHub Pages</strong> for their main domain (e.g., <code>example.com</code>)</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Registrar automatically creates additional subdomains</strong> (e.g., <code>ftp.example.com</code>) with CNAME records pointing to the main domain</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>GitHub allows anyone to claim any subdomain</strong> without verifying ownership or alerting the main domain owner</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Attackers discover and exploit</strong> these dangling subdomains</p>\n</li>\n</ol>\n<p class=\"my-0\">The worst cases involved wildcard CNAME records that redirected any subdomain to the main domain, making infinite subdomain takeovers possible.</p>\n<hr>\n<h2 id=\"the-security-implications-are-severe\" class=\"mb-2 mt-6 text-lg font-[500] first:mt-0 dark:font-[475]\">The Security Implications Are Severe</h2>\n<p class=\"my-0\">Subdomain takeovers enable attackers to:</p>\n<ol class=\"marker:text-textOff list-decimal\">\n<li>\n<p class=\"my-0\"><strong>Host malicious content</strong> under your trusted domain</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Capture cookies</strong> set for your domain</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Perform cross-site scripting attacks</strong></p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Damage brand reputation</strong> through phishing or scam sites</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Bypass certain security controls</strong> that trust your domain</p>\n</li>\n</ol>\n<p class=\"my-0\">For organizations using GitHub Pages, this represents a significant, unaddressed security risk hiding in plain sight.</p>\n<hr>\n<h2 id=\"recommendations-a-shared-responsibility\" class=\"mb-2 mt-6 text-lg font-[500] first:mt-0 dark:font-[475]\">Recommendations: A Shared Responsibility</h2>\n<h3 id=\"mcetoc_1iu7rbpej21\" class=\"mb-xs mt-5 text-base font-[500] first:mt-0 dark:font-[475]\">For Domain Owners and Security Teams:</h3>\n<ol class=\"marker:text-textOff list-decimal\">\n<li>\n<p class=\"my-0\"><strong>Audit all your DNS records</strong>, particularly automatically created subdomains</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Remove unnecessary CNAME records</strong> pointing to your main domain, especially the auto-generated ones created by the registrar</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Set up Google Search Console</strong> with DNS domain verification to be alerted of ownership claims on the Search Console</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Verify custom domains for GitHub Pages</strong> using GitHub's DNS verification system</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Monitor for new subdomains</strong> on an ongoing basis</p>\n</li>\n</ol>\n<h3 id=\"mcetoc_1iu7rbpej22\" class=\"mb-xs mt-5 text-base font-[500] first:mt-0 dark:font-[475]\">For GitHub:</h3>\n<ol class=\"marker:text-textOff list-decimal\">\n<li>\n<p class=\"my-0\"><strong>Implement proper domain verification</strong> before allowing Pages to be published</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Alert domain owners</strong> when a subdomain of their verified domain is claimed by another user</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Proactively scan</strong> for and prevent obvious takeover attempts</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Take vulnerability reports seriously</strong> rather than dismissing documented risks</p>\n</li>\n</ol>\n<h3 id=\"mcetoc_1iu7rbpej23\" class=\"mb-xs mt-5 text-base font-[500] first:mt-0 dark:font-[475]\">For Registrars (like OVH):</h3>\n<ol class=\"marker:text-textOff list-decimal\">\n<li>\n<p class=\"my-0\"><strong>Stop creating DNS records by default</strong> without clear user notification</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Warn users</strong> about potential security implications of default subdomain creation</p>\n</li>\n<li>\n<p class=\"my-0\"><strong>Implement verification steps</strong> for subdomain creation</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"the-big-picture\" class=\"mb-2 mt-6 text-lg font-[500] first:mt-0 dark:font-[475]\">The Big Picture</h2>\n<p class=\"my-0\">This issue represents a classic case of responsibility diffusion. GitHub claims it's the domain owners' responsibility to verify their domains. Domain registrars create potentially vulnerable subdomains without warning. Domain owners often don't know what they don't know.</p>\n<p class=\"my-0\">Meanwhile, attackers are systematically exploiting this gap—I personally identified and could have maliciously taken over 5,000 domains with minimal effort. The real number of vulnerable domains is likely much higher.</p>\n<p class=\"my-0\">What's most concerning is GitHub's dismissal of the issue as not presenting \"a significant security risk,\" when the evidence clearly suggests otherwise. This highlights a troubling disconnect between security researchers identifying real-world vulnerabilities and platform providers willing to address them.</p>\n<p class=\"my-0\">Until GitHub implements proper verification, the burden falls on security teams to regularly audit their DNS configurations and monitor for subdomain takeovers. Sometimes security isn't about sophisticated zero-days—it's about checking your DNS records for the digital equivalent of unlocked doors.</p>",
            "image": "https://gsociety.fr/media/posts/2/ChatGPT-Image-22-mai-2025-01_06_22.png",
            "author": {
                "name": "Guisch"
            },
            "tags": [
                   "subdomaintakeover",
                   "infosec",
                   "githubpages",
                   "dns",
                   "cybersecurity",
                   "bugbounty"
            ],
            "date_published": "2025-05-18T23:07:41+02:00",
            "date_modified": "2025-06-21T01:39:23+02:00"
        }
    ]
}
